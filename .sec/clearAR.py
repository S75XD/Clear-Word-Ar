import re
# https://github.com/linuxscout/pyarabic ูุตุฏุฑ ุจุนุถ ุงูุฏูุงู

# Diacritics | ุญุฑูุงุช
FATHATAN = u'\u064b'
DAMMATAN = u'\u064c'
KASRATAN = u'\u064d'
FATHA = u'\u064e'
DAMMA = u'\u064f'
KASRA = u'\u0650'
SHADDA = u'\u0651'
SUKUN = u'\u0652'

TASHKEEL = (FATHATAN, DAMMATAN, KASRATAN, FATHA, DAMMA, KASRA, SUKUN, SHADDA)

TATWEEL = u'\u0640'

bad_words = ['ูุญุจุฉ', 'ููุนู', 'ุฏููุซ', 'ุฒุจ', 'ุงูุฒุจ', 'ููููู', 'ูุณู', 'ุณููุณู', 'ูุง ุฑุฎูุต', 'ูุงุชูู', 'ูุญุจุฉ', 'ุฏูุฎ', 'ูููุงุฏ ุงู', 'ูุณุฎุชูุง', 'ุงู', 'ุนูุฑู', 'ูุง ุงุฎูุงุช ุงู', 'ุฒุจู', 'ูุญูู', 'ุบุชุตุจ', 'ูุง ุงุจู ุงู', 'ุณูุณู', 'ุงูุฌุฑุงุฑู', 'ููุช ุงุฎุชู', 'ุงููู', 'ุฒููู', '๐', 'ุงุจู ุงูููู', 'ุฒูุงุฉ', 'ุชุฑุถุน', 'ุงูุฎุถูุน', 'ูุถูุจ ูุจูุฑ', 'ุงูุฏููุซ', 'ูุฎูุซ', 'ูุชูุงู', 'ุณููุณ', 'ูุญุจุชู', 'ููุณูู', 'ููุนูู', 'ุงุฌุฑู ููู', 'ุจุฒุงุฒ', 'ุงููุฉููุงุฏ', 'ุณูุณ', 'ุงููุณ', 'ูุฌูุจ ุถูุฑู', 'ุงููุญุจุฉ', 'ุฑูุจู', 'ูุชูุงู', 'ุจุบุชุตุจู', 'ูุณููุณ', 'ูุต', 'ุงููุญ', 'ุงูุนุงูุฑู', 'ูุญููู', 'ุชููุฑู', 'ุชุฌููุฎ', 'ุดุฑููุทู', 'ุจููู', 'ูุงุฎููุซ', 'ุงููุญูู', 'ุงูุฒูุง', 'ูุญูุฉ', 'ุงูู', 'ุจุฎุฑูู', 'ูุณูุง', 'ุชูุต', 'ุนุงูุฑ', 'ุงูุนุฑุต', 'ูุณ ุนุฑุถู', 'ุฎููุซ', 'ููุฏ ุงููุญุจู', 'ููุณูุณ', 'ุนุงูุฑุฉ', 'ุณูุฑููุทู', 'ุฒุจู', 'ูุญุงุจ', 'ุดุฑููุท', 'ูุณูู', 'ูุณ ุงุฎุชู', 'ุงูููู', 'ููุช ุงูู', 'ุญููุงุช', 'ูุง ููุงุฏ ุงู', 'ุชูุจุญ', 'ุฌูู', 'ููุงูู', 'ุจูุนู', 'ุดุฑุฌ', 'ูุณููู', 'ุงูุนู', 'ุงูุฏูููุซ', 'ูุณุงูู', 'ูุง ุฎูุงุช ุงู', 'ุจุฑุถุน', 'ุฌูุฎ', 'ูุณู', 'ุงูููุงุฏ', 'ุงูุณุงูู', 'ุงุดุฎุทู', 'ุงูุฒุงููู', 'ููููููู', 'ูุซูุฑููุท', 'ุนุฑุต', 'ุงูุฒููู', 'ุฎุฑู', 'ุทูุฒ', 'ูุฒุบุจ', 'ุจุนุจุต', 'ูุงููุงุฏู', 'ููููู', 'ูุงูู', 'ูุง ุฒูุฏูู', 'ูููู', 'ุงููุญููู', 'ุงุณุช', 'ุงููุชููุงูู', 'ูุงุฌุฑุงุฑ', 'ูุถูุจู', 'ูููููู', 'ุงููููููู', 'ูุงุฐู ุงูู', 'ูุงุฐู ุงุฎุชู', 'ุฎููุซู', 'ูุงููุงุฏ', 'ูุฐู ุงูู', 'ุนุฏูู ุงูุดุฑู', 'ุงููุนู', 'ุฏูุฏ', 'ุงูุฏููุชู', 'ุชูู', 'ููุฏ ุงููุญุจุฉ', 'ุงูุฑู', 'ุงุจู ุนุงูุฑ', 'ูุงูุญุจู', 'ุฏููุฏ', 'ููููุฉ', 'ูููุชูุง', 'ูุญุณ', 'ุงูููู', 'ูุญุจ', 'ููุงูู', 'ุฎุตูุงูู', 'ุงูุณุงูุท', 'ูุณ', 'ูุฎุงููุซ', 'ููุญูู', 'ูุญูู', 'ุงูุฒุงูู', 'ุฎุชููููู', 'ูุง ูุงูุฑ', 'ุชุฎูุซ', 'ูุญูุจ', 'ุนูุงู ุงูุญุฑุงู', 'ูุงูุญููู', 'ูุนูู', 'ุชุฒุบูุจ', 'ุงูุณุฎู', 'ุฌูุณ', 'ุงูุฑููุง', 'ุจุนุต', 'ุงููุญุจู', 'ูุฌูุฑ', 'ุฌุฑุงุฑ', 'ุจุฑูุจู', 'ุงูููู', 'ุดุฑููุง', 'ูููููููุง', 'ูุฐู ุงุฎุชู', 'ุงูุดุฑููุทู', 'ูุงุฏููุซ', 'ูุงููููู', 'ูุณุง', 'ูุญุจู', 'ูุตู', 'ุงูุฌุฑุงุฑ', 'ุงุฎู ุงู', '๐๐', 'ุงูุดุฑููุทุฉ', 'ุฎูู', 'ุงุญูู ูุซ', 'ูุณ ', 'ููุญุงุจ', 'ููุงูุฉ', 'ุงููุญุจุฉ', 'ุงูุณูุฑููุทู', 'ูุดุชูุชู', 'ูุณ ุงูู', 'ุฏุนุงุฑุฉ', 'ุงููู', 'ุดุฑููุทุฉ', 'ุงููุญุจู', 'ุจูุณูู', 'ูุจุนูุต', 'ููู', 'ูููู', 'ุจูููููุง', 'ุงูููู']

class Word:
	def is_tashkeel(archar):
		"""ูุชุญูู ููุง ุฅุฐุง ูุงู ุงูุญุฑู ุงููุนุทู ูู ุฃุญุฏ ุนูุงูุงุช ุงูุชุดููู ุงูุนุฑุจูุฉ (ูุชุญุฉุ ุถูุฉุ ูุณุฑุฉุ ุณูููุ ุดุฏุฉุ ูุชุญุชุงูุ ุถูุชุงูุ ูุณุฑุชุงู)."""
		return archar in TASHKEEL

	def is_vocalized(word):
		"""ูุชุญูู ููุง ุฅุฐุง ูุงูุช ุงููููุฉ ุงูุนุฑุจูุฉ ูุดูููุฉ. ูุฌุจ ุฃูุง ุชุญุชูู ุงููููุฉ ุนูู ุฃู ูุณุงูุงุช ุฃู ุนูุงูุงุช ุชุฑููู."""
		if word.isalpha():
			return False
		for char in word:
			if Word.is_tashkeel(char):
				break
		else:
			return False
		return True

	def strip_tatweel(text): # ูุฐู ุชุดูู ุงูุชุทููู ูู ุงูุญุฑูููููููููููููู
		"""
		ุฅุฒุงูุฉ ุงูุชุทููู ูุงูุชุดููู ูู ูุต ุนุฑุจู ูุฅุนุงุฏุฉ ุงููุต ูุธูููุง.
		ูุซุงู:
			>>> text = "ุงูุนูููููุฑุจูุฉ"
			>>> strip_tatweel(text)
			'ุงูุนุฑุจูุฉ'

		@param text: ูุต ุนุฑุจู.
		@type text: unicode.
		@return: ูุต ููุธู ูู ุงูุชุทููู ูุงูุชุดููู.
		@rtype: unicode.
		"""
		# ุฅุฒุงูุฉ ุงูุชุทููู
		text = text.replace(TATWEEL, '')
		# ุฅุฒุงูุฉ ุงูุชุดููู
		for char in TASHKEEL:
			text = text.replace(char, '')
		return text

	def remove_special_characters(text):
		"""ุฅุฒุงูุฉ ุงูุฃุญุฑู ุงูุฎุงุตุฉ ุงููุญุฏุฏุฉ ูู ุงููุต."""
		characters_to_remove = "/*-+.+_()*&^%$#@!ูุฐ\"':;{}[]\\|/?<>,."
		for character in characters_to_remove:
			text = text.replace(character, "")
		return text
	
	def remove_emojis(text):
		"""ุฅุฒุงูุฉ ุงูุฅูููุฌูุงุช ูู ุงููุต."""
		emoji_pattern = re.compile(
			"[" 
			"\U0001F600-\U0001F64F"  # ุงููุฌูู ุงูุชุนุจูุฑูุฉ
			"\U0001F300-\U0001F5FF"  # ุงูุฑููุฒ ูุงูุตูุฑ ุงูุชูุถูุญูุฉ
			"\U0001F680-\U0001F6FF"  # ุฑููุฒ ุงูููู ูุงูุฎุฑุงุฆุท
			"\U0001F700-\U0001F77F"  # ุงูุฑููุฒ ุงูููููุงุฆูุฉ
			"\U0001F780-\U0001F7FF"  # ุงูุฃุดูุงู ุงูููุฏุณูุฉ ุงูููุณุนุฉ
			"\U0001F800-\U0001F8FF"  # ุงูุฃุณูู ุงูุชูููููุฉ-C
			"\U0001F900-\U0001F9FF"  # ุงูุฑููุฒ ูุงูุตูุฑ ุงูุชูุถูุญูุฉ ุงูุชูููููุฉ
			"\U0001FA00-\U0001FA6F"  # ุฑููุฒ ุงูุดุทุฑูุฌ
			"\U0001FA70-\U0001FAFF"  # ุงูุฑููุฒ ูุงูุตูุฑ ุงูุชูุถูุญูุฉ ุงูููุณุนุฉ-A
			"\U00002702-\U000027B0"  # ุงูุฒุฎุงุฑู
			"\U000024C2-\U0001F251" 
			"]+", flags=re.UNICODE
		)
		return emoji_pattern.sub(r'', text)

	def remove_repeated_characters(text):
		"""ุฅุฒุงูุฉ ุงูุญุฑูู ุงููุชูุฑุฑุฉ ุงููุชุชุงุจุนุฉ ูู ุงููุต."""
		return re.sub(r'(.)\1+', r'\1', text)

	def BadWord(text): # ููุง ููุชุฑ ุงูููุงู ุงููุตุฎ ุงุฐ ูุงูุช ุตุญ ูุนูุงู ููู ููุงู ูู ุฒูู ูุงูุนูุณ # from MrXD
		"""
		ูุงุฐู ุฏุงูุฉ ููุชุฑ ุงูููุงู ุงุฐ ููุงู ูุตุฎ ูุนุทูู True
		ูุงุฐ ูุงู ูุงููู ูุนุทูู False
		"""
		msg = Word.strip_tatweel(text)
		msg = Word.remove_special_characters(msg)
		msg = Word.remove_emojis(msg)
		msg = Word.remove_repeated_characters(msg)
		msgcat = msg.split()
		for word in msgcat:
			if word in bad_words:
				return True
		return False
